{"version":3,"file":"component---src-pages-repositories-tsx-fa98bd799f91a358b88e.js","mappings":"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","sources":["webpack://redblue.fun/./src/components/geometric.tsx","webpack://redblue.fun/./src/components/divider.tsx","webpack://redblue.fun/./src/components/r-seo.tsx","webpack://redblue.fun/./src/pages/repositories.tsx"],"sourcesContent":["//@ts-nocheck\n\nimport \"./geometric.css\"\n\nconst container = ({ children }) => (\n  <div className=\"main-timeline-geo\">{children}</div>\n)\n\nconst item = ({ date, title, description, component: Component, ...other }) =>\n  Component ? (\n    <Component className=\"timeline-geo\" {...other}>\n      <div className=\"timeline-geo-icon\" />\n      <div className=\"timeline-geo-content\">\n        <span className=\"date\">{date}</span>\n        <h5 className=\"title\">{title}</h5>\n        <p className=\"description\">{description}</p>\n      </div>\n    </Component>\n  ) : (\n    <div className=\"timeline-geo\" key={date || title || description}>\n      <div className=\"timeline-geo-icon\" />\n      <div className=\"timeline-geo-content\">\n        <span className=\"date\">{date}</span>\n        <h5 className=\"title\">{title}</h5>\n        <p className=\"description\">{description}</p>\n      </div>\n    </div>\n  )\n\nexport default {\n  Container: container,\n  Item: item,\n}\n","import \"./divider.scss\"\n\ninterface IFC {\n  children: React.ReactNode\n}\nfunction Divider({ children }: IFC) {\n  return (\n    <div className=\"divider\">\n      <span />\n      <span>{children}</span>\n      <span />\n    </div>\n  )\n}\n\nexport default Divider\n","import { useSiteMetadataContext } from \"@/features/layouts\"\nimport { useSiteMetadata } from \"@/hooks\"\n\ntype ISEOProps = React.PropsWithChildren<{\n  title?: string\n  description?: string\n  pathname?: string\n}>\n\nexport const SEO = ({ title, description, children }: ISEOProps) => {\n  const { title: defaultTitle, description: defaultDescription } =\n    useSiteMetadata()\n\n  return (\n    <>\n      <html lang=\"zh-cmn-Hans\" />\n      <title>{`${title || defaultTitle} - ${defaultTitle}`}</title>\n      <meta\n        name=\"description\"\n        content={description || defaultDescription || \"\"}\n      />\n      {children}\n    </>\n  )\n}\n","import { SEO, Timeline, TimelineItem } from \"@/components\"\nimport { useSiteMetadataContext } from \"@/features/layouts\"\n\nimport type { Gist, Repository } from \"@/typings/github.schemas\"\nimport { Fragment, useEffect, useState } from \"react\"\n\nimport { Container } from \"react-bootstrap\"\nexport const Head = () => <SEO title=\"È°πÁõÆ\" />\nfunction Repositories() {\n  const { setMetadata } = useSiteMetadataContext()\n\n  const [repositories, setRepositories] = useState<Repository[]>([])\n  const [gists, setGists] = useState<Gist[]>([])\n\n  useEffect(() => {\n    setMetadata(() => ({\n      author: null,\n      siteUrl: null,\n      date: null,\n      title: \"È°πÁõÆ\",\n      subTitle: \"Âêæ‰∏éÂæêÂ∑•Â≠∞Â®¥ÁºñÁ†Å‰πãÊäÄ\",\n      description: \"Talk is cheap. Show me the code.\",\n    }))\n  }, [])\n\n  useEffect(() => {\n    fetch(\"https://api.github.com/graphql\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        query: `\n        {\n          viewer {\n            repositories(privacy: PUBLIC, isFork: false, first: 99, orderBy: {field: UPDATED_AT, direction: DESC}) {\n              nodes {\n                id\n                name\n                createdAt\n                pushedAt\n                updatedAt\n                url\n                forkCount\n                licenseInfo {\n                  name\n                  id\n                }\n                primaryLanguage {\n                  name\n                  id\n                  color\n                }\n                homepageUrl\n                description\n                stargazerCount\n                commitComments(last: 1) {\n                  nodes {\n                    commit {\n                      author {\n                        name\n                      }\n                      message\n                    }\n                  }\n                }\n              }\n            }\n            gists(privacy: PUBLIC, first: 99, orderBy: {field: UPDATED_AT, direction: DESC}) {\n              nodes {\n                id\n                description\n                updatedAt\n                url\n              }\n            }\n          }\n        }        \n    `,\n      }),\n      headers: {\n        Authorization: `bearer ${process.env.GATSBY_GITHUB_TOKEN}`,\n      },\n    })\n      .then(res => res.json())\n      .then(res => {\n        setRepositories(res?.data?.viewer?.repositories?.nodes ?? [])\n        setGists(res?.data?.viewer?.gists?.nodes ?? [])\n      })\n  }, [])\n\n  return (\n    <Container fluid=\"lg\" className=\"mx-auto\">\n      <h3>\n        <a\n          href=\"https://github.com/redblue9771\"\n          target=\"_blank\"\n          rel=\"noreferrer noopener\"\n        >\n          üíª Repositories\n        </a>\n      </h3>\n      {/* <Timeline>\n        {repositories.length === 0 && (\n          <TimelineItem\n            header={\n              <h5>\n                <strong className=\"masked\">\n                  üèÉ‚Äç‚ôÇÔ∏è ‰ªé github.com/redblue9771 ÊãâÂèñ‰∏≠‚Ä¶\n                </strong>\n              </h5>\n            }\n            point={<i className=\"bi bi-cpu\" />}\n          />\n        )}\n        {repositories.map(\n          ({\n            id,\n            name,\n            description,\n            updatedAt,\n            forkCount,\n            stargazerCount: starCount,\n            commitComments,\n            licenseInfo,\n            primaryLanguage,\n          }) => (\n            <TimelineItem\n              key={id}\n              header={\n                <Fragment>\n                  <h5 className=\"d-inline-block\">{name}</h5>\n                  <div>\n                    <small>\n                      <span>\n                        <i className=\"bi bi-code-slash\" />\n                        {primaryLanguage ? primaryLanguage.name : \"\"}\n                      </span>\n                      &nbsp;&nbsp;&nbsp;\n                      <span>\n                        <i className=\"bi bi-star\" />\n                        {starCount}\n                      </span>\n                      &nbsp;&nbsp;&nbsp;\n                      <span>\n                        <i className=\"bi bi-bezier2\" />\n                        {forkCount}\n                      </span>\n                      &nbsp;&nbsp;&nbsp;\n                      {licenseInfo && (\n                        <span>\n                          <i className=\"bi bi-book-half\" />\n                          {licenseInfo.name}\n                        </span>\n                      )}\n                    </small>\n                  </div>\n                </Fragment>\n              }\n              body={\n                <Fragment>\n                  <p>{description}</p>\n                  {commitComments?.nodes?.[0] && (\n                    <small className=\"d-block\">\n                      ÊúÄÊñ∞ÁöÑÊèê‰∫§Ôºö\n                      {commitComments?.nodes?.[0]?.commit?.message} by{\" \"}\n                      {commitComments?.nodes?.[0]?.commit?.author?.name}\n                    </small>\n                  )}\n                </Fragment>\n              }\n              footer={\n                <p>\n                  <small>\n                    ÊúÄËøë‰∏ÄÊ¨°Êõ¥Êñ∞Ôºö\n                    {new Date(updatedAt).toLocaleDateString()}\n                  </small>\n                </p>\n              }\n              point={<i className=\"bi bi-cpu\" />}\n            />\n          ),\n        )}\n      </Timeline> */}\n      <div className=\"git-repo-list\">\n        {repositories.map(\n          ({\n            id,\n            name,\n            description,\n            updatedAt,\n            forkCount,\n            stargazerCount: starCount,\n            commitComments,\n            licenseInfo,\n            url,\n            primaryLanguage,\n          }) => (\n            <a\n              className=\"git-repo-list__item\"\n              key={id}\n              href={url}\n              target=\"_blank\"\n            >\n              <h5 className=\"text-truncate\">\n                <i className=\"bi bi-git\" />\n                {name}\n              </h5>\n              <p className=\"text-truncate\">{description || \"-\"}</p>\n\n              <span>\n                <i className=\"bi bi-star-half\" />\n                {starCount}\n              </span>\n              <span>\n                <i className=\"bi bi-diagram-2\" />\n                {forkCount}\n              </span>\n              {/* {licenseInfo && (\n                <span>\n                  <i className=\"bi bi-book-half\" />\n                  {licenseInfo.name}\n                </span>\n              )} */}\n              <span>\n                <i className=\"bi bi-activity\" />\n                {new Date(updatedAt).toLocaleDateString()}\n              </span>\n              <span>\n                <i className=\"bi bi-code-slash\" />\n                {primaryLanguage ? primaryLanguage.name : \"\"}\n              </span>\n            </a>\n          )\n        )}\n      </div>\n      <h3>\n        <a\n          href=\"https://gist.github.com/redblue9771\"\n          target=\"_blank\"\n          rel=\"noreferrer noopener\"\n        >\n          üè∑Ô∏è Gist\n        </a>\n      </h3>\n\n      <ul>\n        {gists.map(({ id, description, updatedAt, url }) => (\n          <li key={id}>\n            <a\n              href={url}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              title={description ?? \"\"}\n            >\n              {new Date(updatedAt).toLocaleDateString()} - {description}\n            </a>\n          </li>\n        ))}\n      </ul>\n    </Container>\n  )\n}\n\nexport default Repositories\n"],"names":["Container","_ref","children","_jsx","className","Item","_ref2","date","title","description","component","Component","other","_jsxs","SEO","defaultTitle","defaultDescription","useSiteMetadata","_Fragment","lang","name","content","Head","setMetadata","useSiteMetadataContext","repositories","setRepositories","useState","gists","setGists","useEffect","author","siteUrl","subTitle","fetch","method","body","JSON","stringify","query","headers","Authorization","process","GATSBY_GITHUB_TOKEN","then","res","json","_res$data$viewer$repo","_res$data","_res$data$viewer","_res$data$viewer$repo2","_res$data$viewer$gist","_res$data2","_res$data2$viewer","_res$data2$viewer$gis","data","viewer","nodes","fluid","href","target","rel","map","id","updatedAt","forkCount","stargazerCount","starCount","commitComments","licenseInfo","url","primaryLanguage","Date","toLocaleDateString"],"sourceRoot":""}